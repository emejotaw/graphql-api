package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.42

import (
	"context"

	"github.com/emejotaw/graphql-api/graph/model"
)

// CreateOrder is the resolver for the createOrder field.
func (r *mutationResolver) CreateOrder(ctx context.Context, input model.NewOrder) (*model.Order, error) {

	order, err := r.orderService.Create(input)

	if err != nil {
		return nil, err
	}

	return &model.Order{
		ID:         order.ID,
		TotalPrice: order.TotalPrice,
	}, nil
}

// CraeteProduct is the resolver for the craeteProduct field.
func (r *mutationResolver) CreateProduct(ctx context.Context, input model.NewProduct) (*model.Product, error) {

	product, err := r.productService.Create(input.Name, input.Quantity, input.Price)

	if err != nil {
		return nil, err
	}

	return &model.Product{
		ID:       product.ID,
		Name:     &product.Name,
		Quantity: product.Quantity,
		Price:    product.Price,
	}, nil
}

// Products is the resolver for the products field.
func (r *orderResolver) Products(ctx context.Context, obj *model.Order) ([]*model.Product, error) {

	products, err := r.orderProductService.FindByOrderId(obj.ID)

	if err != nil {
		return nil, err
	}

	productList := []*model.Product{}
	for _, product := range products {
		productList = append(productList, &model.Product{
			ID: product.ID,

			Name:     &product.Name,
			Quantity: product.Quantity,
			Price:    product.Price,
		})
	}

	return productList, nil
}

// Orders is the resolver for the orders field.
func (r *queryResolver) Orders(ctx context.Context) ([]*model.Order, error) {

	orders, err := r.orderService.FindAll()

	if err != nil {
		return nil, err
	}

	orderList := []*model.Order{}
	for _, order := range orders {
		orderList = append(orderList, &model.Order{
			ID:         order.ID,
			TotalPrice: order.TotalPrice,
		})
	}

	return orderList, nil
}

// Products is the resolver for the products field.
func (r *queryResolver) Products(ctx context.Context) ([]*model.Product, error) {

	products, err := r.productService.FindAll()

	if err != nil {
		return nil, err
	}

	productsRespose := []*model.Product{}
	for _, product := range *products {

		name := product.Name

		productsRespose = append(productsRespose, &model.Product{
			ID:       product.ID,
			Name:     &name,
			Quantity: product.Quantity,
			Price:    product.Price,
		})
	}

	return productsRespose, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Order returns OrderResolver implementation.
func (r *Resolver) Order() OrderResolver { return &orderResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type orderResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
